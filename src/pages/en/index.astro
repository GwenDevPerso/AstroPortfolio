---
import Layout from '../../layouts/Layout.astro';
import data from '../../data/projects.json';
import {Image} from 'astro:assets';
import {getLangFromUrl, useTranslations} from '../../i18n/utils';

// Utiliser le système i18n selon la documentation Astro
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Vraies données des compétences avec icônes et niveaux
const skills = [
    {name: 'HTML', icon: '/assets/logo/html.svg', color: '', level: 5},
    {name: 'CSS', icon: '/assets/logo/css.svg', level: 3},
    {name: 'TypeScript', icon: '/assets/logo/ts.svg', level: 4},
    {name: 'Angular', icon: '/assets/logo/angular.svg', level: 4},
    {name: 'React', icon: '/assets/logo/react.png', level: 3},
    {name: 'Vue', icon: '/assets/logo/vue.svg', level: 2},
    {name: 'NodeJS', icon: '/assets/logo/nodejs.svg', level: 3},
    {name: 'C', icon: '/assets/logo/c.svg', level: 3},
    {name: 'C++', icon: '/assets/logo/c++.svg', level: 3},
    {name: 'Ionic', icon: '/assets/logo/ionic.svg', level: 3},
    {name: 'Elasticsearch', icon: '/assets/logo/elasticsearch.svg', level: 3},
    {name: 'Graphql', icon: '/assets/logo/graphql.svg', level: 3},
    {name: 'MySQL', icon: '/assets/logo/mysql.svg', level: 3},
    {name: 'Git', icon: '/assets/logo/git.svg', level: 3},
    {name: 'Nest', icon: '/assets/logo/nest.png', level: 3},
    {name: 'Next', icon: '/assets/logo/next.png', level: 2},
    {name: 'Jenkins', icon: '/assets/logo/jenkins.png', level: 3},
    {name: 'Web3', icon: '/assets/logo/web3.png', level: 2},
    {name: 'MongoDB', icon: '/assets/logo/mongo.png', level: 3},
];

const projets = data[lang];
---

<Layout lang={lang}>
    <main class="container">
        <section class="section" id="landing">
            <div class="card">
                <div class="grid">
                    <div class="row center">
                        <div class="col-md-4 col-xs-12 center">
                            <Image id="me" src={'/assets/pack.png'} alt="Gwenael Bihan" width={150} height={300} />
                        </div>
                        <div class="col-md-8 col-xs-12">
                            <p class="name">{t('hero.name')}</p>
                            <h1>{t('hero.title')}</h1>
                            <p>{t('hero.location')}</p>
                            <div class="row-profile">
                                <button class="button-profile" onclick="copyToClipboard()">
                                    <span>{t('hero.email')}</span>
                                </button>
                                <button class="button-profile" onclick="onClickLink(1)">
                                    <span>{t('hero.malt')}</span>
                                </button>
                                <button class="button-profile" onclick="onClickLink(2)">
                                    <span>{t('hero.linkedin')}</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <section class="section" id="about">
            <div class="grid">
                <div class="col-md-6 col-xs-12">
                    <div class="card contrast" id="about-card">
                        <div class="card-header">
                            <h2>{t('about.title')}</h2>
                        </div>
                        <div class="card-content">
                            {
                                t('about.content')
                                    .split('\n\n')
                                    .map((paragraph: string) => <p>{paragraph}</p>)
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-6 col-xs-12">
                    <div class="card">
                        <div class="card-header">
                            <h2>{t('skills.title')}</h2>
                        </div>
                        <div class="card-content">
                            <div class="skills">
                                {
                                    skills.map((skill) => (
                                        <div class="skill-item">
                                            <img src={skill.icon} alt={skill.name} class="skill-icon" />
                                            <span class="skill-name">{skill.name}</span>
                                            <div class="skill-level">
                                                {Array.from({length: 5}, (_, i) => (
                                                    <span class={`star ${i < skill.level ? 'filled' : ''}`}>★</span>
                                                ))}
                                            </div>
                                        </div>
                                    ))
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <section class="section" id="prestations">
            <div class="card contrast">
                <div class="card-header">
                    <h2>{t('services.title')}</h2>
                </div>
                <div class="card-content">
                    <div class="grid">
                        <div class="row">
                            <div class="col-md-4 col-xs-12">
                                <h3>{t('services.frontend.title')}</h3>
                                <div
                                    class="service-content"
                                    set:html={t('services.frontend.content').replace(/\n/g, '<br/>')}
                                />
                            </div>
                            <div class="col-md-4 col-xs-12">
                                <h3>{t('services.backend.title')}</h3>
                                <div
                                    class="service-content"
                                    set:html={t('services.backend.content').replace(/\n/g, '<br/>')}
                                />
                            </div>
                            <div class="col-md-4 col-xs-12">
                                <h3>{t('services.mobile.title')}</h3>
                                <div
                                    class="service-content"
                                    set:html={t('services.mobile.content').replace(/\n/g, '<br/>')}
                                />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <section class="section">
            <div class="grid">
                <div class="row">
                    <h2>Réalisations.</h2>
                </div>
                <div class="projects-container">
                    {
                        projets.map((projet) => (
                            <div class="project-card">
                                <div class="card-header">
                                    <div class="tags">
                                        {projet.technologies.map((tech) => (
                                            <span class="tag">{tech}</span>
                                        ))}
                                    </div>
                                    <h3>{projet.name}</h3>
                                </div>
                                <div class="card-content">
                                    <p>{projet.label}</p>
                                    <p class="mb-10">
                                        {projet.startingDate} - {projet.endingDate}
                                    </p>
                                </div>
                                <div class="card-footer">
                                    <button onclick={`navigateTo(${JSON.stringify(projet)})`}>Voir le projet</button>
                                </div>
                            </div>
                        ))
                    }
                </div>
            </div>
        </section>
    </main>
</Layout>

<footer class="footer">
    <div class="footer-content">
        <p>{t('footer.copyright')}</p>
    </div>
</footer>

<script>
    // Fonction pour copier l'email dans le presse-papier
    async function copyToClipboard() {
        try {
            await navigator.clipboard.writeText('gwenael.bihan@protonmail.com');
            alert('Texte copié: gwenael.bihan@protonmail.com');
        } catch (err) {
            alert('Erreur lors de la copie: ' + err);
        }
    }

    // Fonction pour ouvrir les liens externes
    function onClickLink(int: number) {
        if (int == 1) {
            window.location.href = 'https://www.malt.fr/profile/gwenaelbihan';
        } else if (int == 2) {
            window.location.href = 'https://www.linkedin.com/in/gwenael-bihan-a25b62153/';
        }
    }

    // Fonction pour naviguer vers le détail d'un projet
    function navigateTo(item: any) {
        const currentPath = window.location.pathname;
        const lang = currentPath.startsWith('/en') ? '/en' : '';
        window.location.href = `${lang}/project/${item.id}`;
    }

    // Déclarer les types pour les fonctions globales
    declare global {
        interface Window {
            copyToClipboard: () => Promise<void>;
            onClickLink: (int: number) => void;
            navigateTo: (item: any) => void;
        }
    }

    // Rendre les fonctions globales pour les événements onclick
    (window as any).copyToClipboard = copyToClipboard;
    (window as any).onClickLink = onClickLink;
    (window as any).navigateTo = navigateTo;

    // Fonction pour ajuster la vitesse d'animation en fonction de la largeur de l'écran
    function adjustAnimationDuration() {
        const rows = document.querySelectorAll('.projects-row');
        const screenWidth = window.innerWidth;
        const duration = Math.max(20, Math.min(40, screenWidth / 50)); // Entre 20s et 40s selon la largeur

        rows.forEach((row) => {
            (row as HTMLElement).style.animationDuration = `${duration}s`;
        });
    }

    // Fonction pour dupliquer les cartes et créer un défilement infini
    function setupInfiniteScroll() {
        const rows = document.querySelectorAll('.projects-row');

        rows.forEach((row) => {
            const cards = row.children;
            const rowWidth = Array.from(cards).reduce(
                (width, card) => width + (card as HTMLElement).offsetWidth + 20,
                0,
            );
            const repeatsNeeded = Math.ceil((window.innerWidth * 2) / rowWidth);

            // Dupliquer les cartes autant de fois que nécessaire
            for (let i = 0; i < repeatsNeeded; i++) {
                Array.from(cards).forEach((card) => {
                    const clone = card.cloneNode(true) as HTMLElement;
                    row.appendChild(clone);
                });
            }
        });
    }

    // Ajuster la vitesse au chargement et au redimensionnement
    window.addEventListener('load', () => {
        setupInfiniteScroll();
        adjustAnimationDuration();
    });
    window.addEventListener('resize', adjustAnimationDuration);
</script>

<style>
    .container {
        margin: 0 auto;
        padding: 20px;
    }

    .card {
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 10px;
    }

    .contrast {
        background: #0c1021;
        border: 1px solid #6919ff4d;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 15px;
        transition:
            transform 0.3s ease,
            box-shadow 0.3s ease;
    }

    .contrast {
        background: none;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 15px;
        transition:
            transform 0.3s ease,
            box-shadow 0.3s ease;
        position: relative;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .contrast::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        background: radial-gradient(
            circle,
            rgba(105, 25, 255, 0.4) 0%,
            rgba(105, 25, 255, 0.2) 30%,
            rgba(105, 25, 255, 0.1) 60%,
            transparent 70%
        );
        transform: translate(-50%, -50%);
        transition: all 0.6s ease;
        pointer-events: none;
        opacity: 0;
        border-radius: 50%;
        animation: none;
    }

    .contrast:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 20px rgba(105, 25, 255, 0.3);
    }

    .contrast:hover::before {
        width: 250%;
        height: 250%;
        opacity: 1;
        animation: sparkle 2s ease-out infinite;
    }

    .section {
        margin-bottom: 40px;
        background: none;
        .card {
            background: none;
        }
    }

    .grid {
        display: grid;
        gap: 30px;
    }

    .row,
    .row-profile {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        align-items: stretch;
    }

    .row-profile {
        margin-top: 50px;
    }

    .row.center {
        align-items: center;
        justify-content: center;
    }

    .col-4 {
        flex: 1;
        min-width: 150px;
    }

    .col-md-4 {
        flex: 0 0 calc(33.333% - 20px);
        min-width: 250px;
    }

    .col-md-6 {
        flex: 0 0 calc(50% - 20px);
        min-width: 300px;
    }

    .col-md-8 {
        flex: 0 0 calc(66.666% - 20px);
    }

    .col-xs-12 {
        flex: 1;
    }

    .center {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    #me {
        border-radius: 50%;
        object-fit: contain;
        transition: filter 0.3s ease;
    }

    #me:hover {
        filter: grayscale(100%);
    }

    .name {
        font-size: 1.1rem;
        color: #888;
        margin: 0;
    }

    h1 {
        color: #f8f9fa;
        font-size: 1.8rem;
        margin: 8px 0;
        line-height: 1.3;
    }

    button {
        color: #6919ff;
        padding: 4px 16px;
        border-radius: 6px;
        border: 1px solid #6919ff4d;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 14px;
        background-color: #6919ff1a;
        width: 100%;
    }

    button:hover {
        background-color: #6919ff33;
    }

    .button-profile {
        max-width: 100px;
        height: 30px;
        position: relative;
        overflow: hidden;
    }

    .button-profile::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: #6919ff33;
        transition: left 1s ease;
    }

    .button-profile:hover::before {
        left: 0;
    }

    .button-profile span {
        position: relative;
        z-index: 1;
    }

    /* Skills */
    .skills {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 16px;
    }

    .skill-item {
        display: flex;
        align-items: center;
        padding: 12px;
        background: #f8f9fa;
        border-radius: 8px;
        transition: transform 0.2s ease;
    }

    .skill-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .skill-icon {
        width: 24px;
        height: 24px;
        margin-right: 12px;
        object-fit: contain;
    }

    .skill-name {
        font-weight: 500;
        margin-right: auto;
        color: #333;
    }

    .skill-level {
        display: flex;
        gap: 2px;
    }

    /* Stars */
    .star {
        color: #ddd;
        font-size: 14px;
    }

    .star.filled {
        color: #ffc107;
    }

    /* Tags */
    .tags {
        display: flex;
        flex-wrap: wrap;
        gap: 6px;
        margin-bottom: 12px;
    }

    .tag {
        background: #333;
        color: white;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
    }

    .card {
        position: relative;
        z-index: 2;
    }

    /* Projects */
    .projects-container {
        display: grid;
        gap: 20px;
        padding: 20px;
        grid-template-columns: 1fr; /* Par défaut: 1 colonne pour mobile */
    }

    .project-card {
        background: none;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 15px;
        transition:
            transform 0.3s ease,
            box-shadow 0.3s ease;
        position: relative;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .project-card::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        background: radial-gradient(
            circle,
            rgba(105, 25, 255, 0.4) 0%,
            rgba(105, 25, 255, 0.2) 30%,
            rgba(105, 25, 255, 0.1) 60%,
            transparent 70%
        );
        transform: translate(-50%, -50%);
        transition: all 0.6s ease;
        pointer-events: none;
        opacity: 0;
        border-radius: 50%;
        animation: none;
    }

    .project-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 20px rgba(105, 25, 255, 0.3);
    }

    .project-card:hover::before {
        width: 250%;
        height: 250%;
        opacity: 1;
        animation: sparkle 2s ease-out infinite;
    }

    /* Footer */
    @keyframes sparkle {
        0% {
            opacity: 0;
            transform: translate(-50%, -50%) scale(0);
        }
        50% {
            opacity: 1;
        }
        100% {
            opacity: 0;
            transform: translate(-50%, -50%) scale(1);
        }
    }

    .mb-10 {
        margin-bottom: 10px;
        font-size: 14px;
        color: #888;
    }

    .service-content {
        line-height: 1.8;
        color: #e0e0e0;
        font-size: 14px;
    }

    .footer {
        background: #333;
        color: white;
        text-align: center;
        padding: 20px 0;
        margin-top: 40px;
    }

    .footer-content p {
        margin: 0;
    }

    /* Responsive */
    @media (max-width: 768px) {
        .row {
            flex-direction: column;
        }

        .row-profile {
            justify-content: center;
        }

        .button-profile {
            max-width: 100px;
            height: 30px;
        }

        .project-card {
            max-width: unset;
        }

        .col-md-4,
        .col-md-6,
        .col-md-8 {
            flex: 1;
        }

        h1 {
            font-size: 1.5rem;
        }

        .container {
            padding: 10px;
            width: 100%;
        }

        .skills {
            grid-template-columns: 1fr;
        }
    }

    /* Tablette: 2 colonnes */
    @media (min-width: 600px) {
        .projects-container {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    /* Petit desktop: 3 colonnes */
    @media (min-width: 900px) {
        .projects-container {
            grid-template-columns: repeat(3, 1fr);
        }
    }

    /* Grand desktop: 4 colonnes */
    @media (min-width: 1200px) {
        .projects-container {
            grid-template-columns: repeat(4, 1fr);
        }
    }

    #landing {
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 50px;
    }

    .card {
        position: relative;
        z-index: 2;
    }
</style>
